This document will attempt the explain the design choices for this program.

====================================================================================================

<Program Assumptions>

	(Any deviations from these expectations may cause unexpected results)

	- The provided text files will not consist any unexpected signatures or the '/r' character

	- The values in the metadata files are correctly formatted:
	  - The number of files given at the start should reflect the number of file paths given
	  - No extra white spaces (space and lines)
	  - There are exactly 0, 1 or 2 floating point numbers following a file path
	    - 0 : both alpha and beta are assumed to be default (1.0)
	    - 1 : alpha is taken as the value and beta is assumed to be default
	    - 2 : both alpha and beta take on its respective values

	- The values in the input files are correctly formatted:
	  - No extra white spaces (space and lines)
	  - Exactly 1 value per line
	  - Each value valid 16 bit integer
	  
	- The following actions will result in an error message and the program's termination:
	  - Too few arguments
	  - Too many arguments
	  - Non-divisibility between the number of files and threads
	  - Buffer size is zero or less
	  - Number of threads is zero
	  - Number of files is zero
	  - Incorrect options for lock configuration and global checkpointing
	  - Non-existent/invalid file paths (of metafile or any file listed in the metafile)
	
====================================================================================================

<Task Distribution>

The number of tasks each thread takes on is evenly distributed (as per assignment assumptions). Each thread T(i) in {T(1), T(2)... T(n)} takes on task (i - 1) + c * num_threads, where c is some positive integer. For example, suppose there are 6 tasks and 2 threads, thread 1 will take on task 0, task 2, and task 4.

    T(1) -> task 0
    T(2) -> task 1
    T(1) -> task 2
    T(2) -> task 3
    T(1) -> task 4
    T(1) -> task 5

Each thread will start at the function: compute_channels()

====================================================================================================

<Reading Input>

Each thread will read exactly k = buffer_size bytes from the input file per iteration. As stated previously, the program will not account for files that contain '\r\n' as the next-line indicator. The program will produce different results if the files contain '\r\n' instead of '\n'.

More details about file reading per thread will be discussed in the checkpointing section.

====================================================================================================

<Shared Variables>

There exists two main variables that are shared to be written to among all threads: output_entries, output_size

output_entries:
A shared array of floats that stores each entry of the output file. The output of entry computed by a thread (per read iteration) will be stored here by indexing into the array and incrementing the previous value at that location. This data structure is static and has a fixed size.

The original designed was to let the array grow as needed. However, this can cause synchronization problems when lock configuration = 2 where a thread can be resizing while another thread is writing. A potential solution is to put another lock onto the structure but that would defeat the purpose of having a lock on each entry to begin with.

====================================================================================================

<Calculation>

Calculation only takes place in the critical section. Values are read (from output_entries), computed (with values from input channel), and written (back to output_entries).

The final output that is written will be the minimum value between 65525 and the computed value. This ensures that there will never be overflow.

====================================================================================================

<Lock Configuration>

lock_config = 0:
A shared variable c_lock is used as the main lock for the entire output channel. TestAndSet is the mechanism that is used for this spinlock. The __sync_lock_test_and_set() function provided by GCC is the implementation used for the mechanism.

lock_config = 1:
A spinlock via. TestAndSet mechanism is also used for this configuration similar to the prior. However, the locks are stored in a shared variable c_lock_entries which has a lock corresponding to an entry in output_entries via common index. For example, the c_lock_entries[1] is a lock for the second entry (output_entries[1]). Similar to output_entries, c_lock_entries will grow as needed when new entries get added and c_lock_entries_size is used to track the size of the structure.

lock_config = 2:
The __sync_val_compare_and_swap() function provided by GCC is used as the CompareAndSwap mechanism of this configuration.

The __sync_lock_release() function provided by GCC is used to reset the lock value to 0 (For any aforementioned configurations).

Built in GCC functions are used to ensure the atomicity of all lock operations.

====================================================================================================

<Checkpointing>

local:
The thread will constantly cycle through all files (that it is in charge of) and read k bytes at a time. In a while loop, the thread will read one file and then switch to the next file in rotation. The while loop is terminated once all files are finished.

Example: Suppose thread T is working on files A, B, C, and k = 3 bytes. Then the reading procedure would look something like this as follows:

	 loop       bytes
	 --------------------------
	 it0  - read (0 - 2) from A
	 it1  - read (0 - 2) from B
	 it2  - read (0 - 2) from C
	 it3  - read (3 - 5) from A
	 it4  - read (3 - 5) from B
	 it5  - read (3 - 5) from C
	 it6  - read (6 - 8) from A
	 .    	.
	 .	.
	 .	.
	 --------------------------

This ensures that, for example: A does not read its next k bytes before B and C read its current k bytes.

global:
Similar to local, files will still be read in a circular manner within each thread. However, a checkpoint is placed for a thread after each read cycle, preventing it to move onto the next. The checkpoint will only be unlocked once all threads have completed the current cycle, which then allow all threads to commence to the next cycle.

The checkpoint in each thread is implemented using pthread barriers. The barrier is initialized with the n = (number of threads). Thus, all threads will only commence from the checkpoint if all n threads arrive at the barrier.

If a thread T finishes processing its files before other threads, T will still continue its cycle (by doing no work) instead of exiting early in order to participate in the barrier. Otherwise, the threads that are still processing will hang forever since all threads are required to reach the barrier for them to move forward.

G_FLAG is a variable used to track the number of threads who are done processing (non-working threads). When the value of G_FLAG equals the number of threads, all threads will exit the barrier loop and terminate. Suppose the last working thread just finished and updated the value of G_FLAG (now the exiting condition is satisfied), there may be some non-working thread that could potentially be exit early as it has not reached the next barrier yet, which will leave the threads at the barrier hang. Thus, A_FLAG is a variable that is used to track the number of threads who reached the barrier, so that the last working thread will ONLY update G_FLAG once it knows all other threads are waiting at the barrier. Hence, no race condition on G_FLAG and uniform exits.

Note: Modification of values for both G_FLAG and A_FLAG are done atomically using provided functions from <stdatomic.h>.

Ex. Exiting early

time=0	  [Last Working T]			[Non Working T]
	  Previous Barrier                  	Previous Barrier
	  ...
	  G_FLAG++ // now equals num_threads	...
	  ...					if (G_FLAG == num_threads)
	                                           break & exit

					    	...
time=n    Next Barrier		            	Next Barrier

We want the non working T to reach the Next Barrier before the last working T to update G_FLAG

====================================================================================================

Output:

Once all thread computations are finished, the values in output_entries are rounded, parsed, and formatted into a buffer which is then dumped into the provided path for the output .txt file.

Each output value is separated by a line (with '\n) in the output file


valgrind --leak-check=full --show-leak-kinds=all --fair-sched=yes ./myChannel 3 2 meta.txt 1 1 my_out.txt
